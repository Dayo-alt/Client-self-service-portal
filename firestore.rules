rules_version='2'

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // This rule allows anyone with your database reference to view, edit,
      // and delete all data in your database. It is useful for getting
      // started, but it is configured to expire after 30 days because it
      // leaves your app open to attackers. At that time, all client
      // requests to your database will be denied.
      //
      // Make sure to write security rules for your app before that time, or
      // else all client requests to your database will be denied until you
      // update your rules.
      allow read, write: if request.time < timestamp.date(2025, 9, 20);
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // users collection: owner can read/update their own doc; admins can read/update/delete any user
    match /users/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      allow read, update: if request.auth != null && (request.auth.uid == userId || request.auth.token.admin == true);
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }

    // authLogs: anyone authenticated can create a log (client-side), but only admins can read logs
    match /authLogs/{logId} {
      allow create: if request.auth != null;
      allow read, update, delete: if request.auth != null && request.auth.token.admin == true;
    }
  }
}
// Ticketing system rules
match /tickets/{ticketId} {
  // Anyone (even without auth) can create a ticket
  allow create: if true;

  // Only admins can read or update tickets
  allow read, update, delete: if request.auth != null && request.auth.token.admin == true;

  // Messages subcollection
  match /messages/{msgId} {
    // Both users and admins can add messages
    allow create: if true;

    // Only admins can read or update messages
    allow read, update, delete: if request.auth != null && request.auth.token.admin == true;
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Tickets: anyone can create, anyone can read (test version)
    match /tickets/{ticketId} {
      allow create: if true;
      allow read: if true;
    }
  }
}

service cloud.firestore {
  match /databases/{database}/documents {
    match /tickets/{ticketId} {
      allow create: if request.auth != null; // must be logged in
      allow read: if request.auth != null;
    }
  }
}
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /avatars/{uid}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }
    match /{allPaths=**} {
      allow read: if true;
    }
  }
}
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /profiles/{uid} {
      allow read, write: if request.auth != null && request.auth.uid == uid;
    }
  }
}